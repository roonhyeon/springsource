<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적파일 위치: html, css, js, img
	     resources/js => http://localhost:8080/js/my.js
	-->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
	     http://localhost:8080/ ==> home.jsp 보여준다.
	     -원리-
	     http://localhost:8080/ 요청을 하면 DispatcherServlet가 그 요청 처리하기 위해 요청을 응답할 수 있는 컨트롤러(액션) 찾게 된다.
	     그리고 찾은 컨트롤러에게 요청을 넘긴다. 요청을 받은 컨트롤러는 요청을 처리하고 그 실행 결과를 리턴한다. 그럼 실행 결과에 맞춰 ViewResolver가 실행된다.
	     실행된 ViewResolver는 /WEB-INF/views/리턴값.jsp를 리턴한다. 최종적으로 jsp가 화면에 출력되고 보여진다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.spring.controller" />
	
	
	
</beans:beans>
